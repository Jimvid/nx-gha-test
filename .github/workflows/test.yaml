name: Frontend
on:
  pull_request:
    types: [opened, synchronize, reopened]
    # For now we only run the tests on FE changes.
    # Remove "paths" when we want the BE run the actions as well.
    paths:
      - "frontend/**"

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-node-modules.outputs.cache-hit }}

    steps:
      - uses: actions/checkout@v4

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies if cache missed
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
        working-directory: frontend

  format:
    name: check code formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/yarn-lock.json') }}
      - run: npx nx format:check --all
        working-directory: frontend

  lint:
    name: lint code
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/yarn-lock.json') }}
      - run: npx nx run react:lint
        working-directory: frontend
  test:
    name: run tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
      - run: npx nx run react:test
        working-directory: frontend
  deploy:
    name: Deploy coverage report
    needs: setup
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Run tests and generate coverage report
        run: npx nx run react:test --coverage
        working-directory: frontend

      - name: "Report Coverage"
        if: always() # Also generate the report if tests are failing
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          json-summary-path: frontend/apps/react/reports/coverage/coverage-summary.json

      # - name: Organize reports by date and put in temporary folder
      #   run: |
      #     REPORT_DIR="${{ github.workspace }}/../temp/coverage_reports/$(date +%Y%m%d-%H%M%S)"
      #     mkdir -p "$REPORT_DIR"
      #     cp -r frontend/apps/react/html/* "$REPORT_DIR/"
      #
      # - name: Everything in place?
      #   run: ls -R ${{ github.workspace }}/../temp
      #
      # - name: Checkout gh-pages branch
      #   uses: actions/checkout@v3
      #   with:
      #     ref: "gh-pages"
      #     token: ${{ secrets.PUBLISH_COVERAGE }}
      #     path: "gh-pages-dir"
      #
      # - name: Restore reports from the temporary location
      #   run: cp -r ${{ github.workspace }}/../temp/coverage_reports/. gh-pages-dir/coverage_reports/
      #
      # - name: Git Status
      #   run: git status
      #
      # - name: Generate Index.html
      #   run: |
      #     mv ./frontend/scripts/generate_index.sh ./gh-pages-dir/generate_index.sh
      #     cd gh-pages-dir
      #     chmod +x ./generate_index.sh
      #     ./generate_index.sh
      #     ls
      #
      # - name: Push reports to gh-pages branch
      #   run: |
      #     cd gh-pages-dir
      #     git config user.name "GitHub Actions"
      #     git config user.email "actions@github.com"
      #     git add -f coverage_reports/ index.html
      #     git commit -m "Deploy new coverage report dated $(date +%Y%m%d-%H%M%S)"
      #     git push -f origin HEAD:gh-pages
